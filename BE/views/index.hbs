<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"
        integrity="sha384-mZLF4UVrpi/QTWPA7BjNPEnkIfRFn4ZEO3Qt/HFklTJBj/gBOV8G3HcKn4NfQblz" crossorigin="anonymous">
        </script>
    <style>
        body {
            margin-top: 20px;
        }

        .chat-online {
            color: #34ce57
        }

        .chat-offline {
            color: #e4606d
        }

        .chat-messages {
            display: flex;
            flex-direction: column;
            max-height: 800px;
            overflow-y: scroll
        }

        .chat-message-left,
        .chat-message-right {
            display: flex;
            flex-shrink: 0
        }

        .chat-message-left {
            margin-right: auto
        }

        .chat-message-right {
            flex-direction: row-reverse;
            margin-left: auto
        }

        .py-3 {
            padding-top: 1rem !important;
            padding-bottom: 1rem !important;
        }

        .px-4 {
            padding-right: 1.5rem !important;
            padding-left: 1.5rem !important;
        }

        .flex-grow-0 {
            flex-grow: 0 !important;
        }

        .border-top {
            border-top: 1px solid #dee2e6 !important;
        }
    </style>
</head>

<body onload="showPrompt()">
    <div class="col-12 col-lg-7 col-xl-9">
        <div class="py-2 px-4 border-bottom d-none d-lg-block">
            <div class="d-flex align-items-center py-1">
                <div class="position-relative">
                    <img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="rounded-circle mr-1"
                        alt="Sharon Lessman" width="40" height="40">
                </div>
                <div class="flex-grow-1 pl-3">
                    <strong>Sharon Lessman</strong>
                    <div class="text-muted small " id="typing"></div>
                </div>
                <div>
                    <button class="btn btn-primary btn-lg mr-1 px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                            height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round" class="feather feather-phone feather-lg">
                            <path
                                d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z">
                            </path>
                        </svg></button>
                    <button class="btn btn-info btn-lg mr-1 px-3 d-none d-md-inline-block"><svg
                            xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                            class="feather feather-video feather-lg">
                            <polygon points="23 7 16 12 23 17 23 7"></polygon>
                            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                        </svg></button>
                    <button class="btn btn-light border btn-lg px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                            height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                            stroke-linecap="round" stroke-linejoin="round"
                            class="feather feather-more-horizontal feather-lg">
                            <circle cx="12" cy="12" r="1"></circle>
                            <circle cx="19" cy="12" r="1"></circle>
                            <circle cx="5" cy="12" r="1"></circle>
                        </svg></button>
                </div>
            </div>
        </div>

        <div class="position-relative">
            <div class="chat-messages p-4" id="messages">

                <div class="chat-message-right pb-4" id="initialMessage">
                    <div>
                        <img src="https://bootdey.com/img/Content/avatar/avatar1.png" class="rounded-circle mr-1"
                            alt="Chris Wood" width="40" height="40">
                        <div class="text-muted small text-nowrap mt-2"></div>
                    </div>
                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                        <div class="font-weight-bold mb-1 name"></div>
                        <div class="font-weight-bold mb-1 text"></div>
                    </div>
                </div>

                <div class="chat-message-left pb-4" id="initialMessageLeft">
                    <div>
                        <img src="https://bootdey.com/img/Content/avatar/avatar3.png" class="rounded-circle mr-1"
                            alt="Sharon Lessman" width="40" height="40">
                        <div class="text-muted small text-nowrap mt-2"></div>
                    </div>
                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                        <div class="font-weight-bold mb-1 name"></div>
                        <div class="font-weight-bold mb-1 text"></div>
                    </div>
                </div>



            </div>
        </div>

        <div class="flex-grow-0 py-3 px-4 border-top">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Type your message" id="messageInput">
                <button class="btn btn-primary" onclick="sendMessage()">Send</button>
            </div>
        </div>

        <script>
            const socket = io("http://localhost:3000"); // Replace with your server URL

            // Listen for the connection event
            socket.on("connect", () => {
                console.log("Connected to Socket.IO server");
                // Send a emessage to th server
                socket.emit("findAllMessages", (message) => {
                    message.map((e) => {
                        displayMessage(e);
                    })
                });
            });

            // Listen for messages from the server
            socket.on("messages", (message) => {
                console.log("Message from server: ", message);
                displayMessage(message);
            });

            // Listen for the disconnection event
            socket.on("disconnect", () => {
                console.log("Disconnected from Socket.IO server");
            });
            socket.on('typing', ({ name, isTyping }) => {
                if (isTyping) {
                    console.log(name, isTyping)
                    if (name != userInput) {
                        document.getElementById('typing').innerHTML = `${name} is typing`
                    }
                } else {
                    document.getElementById('typing').innerHTML = ''

                }
            });
            var userInput;
            let idClient;
            function showPrompt() {
                userInput = prompt("Please enter your name:");
                if (userInput !== null) {
                    alert("You entered: " + userInput);
                    socket.emit('join', { name: userInput }, (e) => {
                        idClient = e;
                    });
                }
            }
            messageInput.addEventListener("input", function (event) {
                socket.emit('typing', { isTyping: true, keyClient: idClient });
                setTimeout(() => {
                    socket.emit('typing', { isTyping: false, keyClient: idClient });
                }, 1000);
            });
            function sendMessage() {
                const messageInput = document.getElementById("messageInput");
                const message = messageInput.value;
                if (message.trim() !== "") {
                    // Send the message to the server
                    socket.emit("createMessage", { clientID: idClient, text: message });
                    // Display the message on the client
                    messageInput.value = "";
                }
            }

            function displayMessage(message) {
                var messagesContainer = document.getElementById("messages");

                // Clone the initial message block
                var initialMessage = message.name == userInput ? document.getElementById("initialMessage") : document.getElementById("initialMessageLeft")
                var newMessageBlock = initialMessage.cloneNode(true);

                // Modify the content of the new message block if needed
                var timestamp = newMessageBlock.querySelector(".text-muted");
                var messageContent = newMessageBlock.querySelector(".flex-shrink-1 ");
                var name = newMessageBlock.querySelector(".name");
                var text = newMessageBlock.querySelector(".text");

                // For demonstration purposes, update timestamp and message content
                var now = new Date();
                timestamp.textContent = now.getHours() + ":" + now.getMinutes() + "";
                name.textContent = `${message.name}`;
                text.textContent = `${message.text}`;

                // Append the new message block to the messages container
                messagesContainer.appendChild(newMessageBlock);
            }

        </script>
</body>

</html>